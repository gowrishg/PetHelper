[global]
# The settings in this file should not vary depending on the deployment
# environment. dev.cfg and prod.cfg are the locations for
# the different deployment settings. Settings in this file will
# be overridden by settings in those other files.

# The commented out values below are the defaults

# APPLICATION PACKAGE

package = "pethelper"

# VIEW

# If you change any of the following template engine options after your
# application has started, you need to call view.load_engines() for the change
# to take effect.

# which view (template engine) to use if one is not specified in the
# template name
tg.defaultview = "genshi"
tg.include_widgets = ['turbogears.mochikit']

# The following settings determine the options used by the Genshi engine.

# One of (html|html-strict|html-transitional|xhtml|xhtml-strict|html5) or None
# or a dictionary mapping format names (see below) to one of the above.
# genshi.default_doctype =  {
#   'html: 'html-strict', 'xhtml': 'xhtml-strict', xml: None}

# Encoding of Genshi output.
# genshi.default_encoding = "utf-8"

# One of (xml|xhtml|html|text)
# Warning: this setting will be overwritten by 'genshi.outputformat' if the
# latter is set.
# genshi.default_format = "html"

# lenient or strict
# genshi.lookup_errors = "strict"

# The following genshi.* settings are NOT set to default values by TurboGears
# but the commented settings show the default value the Genshi plugin uses.
# If you set them, they are passed to the gesnhi plugin on initialisation.

# The maximum number of templates that the loader will cache in memory.
# genshi.max_cache_size = 25

# File-system path names to be use to search for templates.
# genshi.search_path = ""

# Whether the Python code blocks should be permitted in templates (boolean).
# genshi.allow_exec = True

# Whether the template loader should check the last modification time of
# template files and relaod them if they have changed ("yes" or "no").
# genshi.auto_reload = "yes"

# Whether the new syntax for text templates should be used ("yes" or "no").
# genshi.new_text_syntax = "no"


# The following settings determine the options used by the Kid engine.

# Kid output method (e.g. html, html-strict, xhtml, xhtml-strict, xml, json)
# and formatting (e.g. default, straight, compact, newlines, wrap, nice)
# kid.outputformat = "html default"

# Encoding of Kid output.
# kid.encoding = "utf-8"

# End template engine options.


# The sitetemplate is used for overall styling of a site that
# includes multiple TurboGears applications
# tg.sitetemplate = "<packagename.templates.templatename>"

# Allow every exposed function to be called as json,
# tg.allow_json = False

# Control how MochiKit is loaded using tgMochiKit.
# See http://docs.turbogears.org/tgMochiKit for more information.
# tg_mochikit.packed = False
# tg_mochikit.xhtml = False
# TurboGears >= 1.1 needs MochiKit >= 1.4 for all JS-enhanced widgets to work
# correctly. Don't change the following setting unless you know what you are
# doing!
tg_mochikit.version = '1.4'

# List of Widgets to include on every page.
# tg.include_widgets = []
# For example to include the MochiKit library provided by TurboGears+tgMochiKit:
# tg.include_widgets = ['turbogears.mochikit']

# If you want to use ToscaWidgets, you need to activate them here.
# toscawidgets.on = True

# Set to True if the scheduler should be started
# tg.scheduler = False

# Set to True to allow paginate decorator redirects when page number gets
# out of bound. Useful for getting the real page id in the url
# paginate.redirect_on_out_of_range = True

# Set to True to allow paginate decorator redirects when last page is requested.
# This is useful for getting the real last page id in the url
# paginate.redirect_on_last_page = True

# Set session or cookie
session_filter.on = True

# Set internationalization
# i18n.run_template_filter = True
# possible values are 'tg_gettext', 'so_gettext', 'sa_gettext'
# the default one if nothing is set will be tg_gettext, so and sa
# are specific storage backends that will use a database and
# SQLObject driver or SQLAlchemy driver respectively
# i18n.gettext = 'tg_gettext'

# CatWalk session directory
# You may need to set this to the path of a directory with write access for
# your server, e.g. if you deploy behind mod-wsgi and you want to use CatWalk
# mounted in your own controllers.
# By default CatWalk stores its session data in the directory 'catwalk-session'
# below your application's package directory or below the current directory.
# The path may be absolute or relative to the current working directory of your
# server. The directory will be created if it does not exist, so make sure it
# either exists already or the server has write access in the parent directory
# as well. Example:
# catwalk.session_dir = "/absolute/path/to/catwalk-session-dir"
# Default:
# catwalk.session_dir = 'catwalk-session'


# compress the data sends to the web browser
# [/]
# gzip_filter.on = True
# gzip_filter.mime_types = ["application/json", "application/x-javascript",
#     "text/javascript", "text/html", "text/css", "text/plain"]

# Some buggy Flash file upload clients (e.g. on Mac OS X) do not end multipart
# requests correctly with CR/LF, which breaks the request parsing of CherryPy.
# Set 'safempfilter.on' to True to enable a workaround.
# You should restrict this filter to the URL paths which will actually have to
# handle file uploads from Flash. For example:
# [/upload]
# safempfilter.on = True

[/static]
static_filter.on = True
static_filter.dir = "%(package_dir)s/static"

[/favicon.ico]
static_filter.on = True
static_filter.file = "%(package_dir)s/static/images/favicon.ico"
